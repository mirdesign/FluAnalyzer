#!/bin/sh

#############################################################
#                                                           #
# Contact:                                                  #
#   Maarten Pater (m.pater@amc.uva.nl / www.mirdesign.nl)   #
#   Bjorn Koel (b.f.koel@amc.uva.nl)                        #
#                                                           #
#############################################################

#################################################################################################################################################################
#																	README before running RFS_and_PNC.sh														#
# Use this script for:																																			#
# 1. reading frame selection																																	#
#		This sh script controls reading_frame_selector.py, which parses multiple influenza virus reading frame files to identify correct reading frames			#
#		in files translated to amino acid sequence by translate_sam_to_AA.php. reading_frame_selector.py results in one or two files for each					#
#		gene segment depending on the gene segment from which the translation was made (one file: PB2, HA, NP, and NA; two files: PB1, PA, MP and NS).			#
# 2. protein numbering conversion																																#
#		This sh script controls protein_numbering_converter.py, which adapts the numbering of identified reading frames from reading_frame_selector.py			#
#		to start at ATG (gene segment files) or M (protein files), stop before stopcodons (protein files), and continue the correct protein numbering			#
#		for concatenated files (protein files, i.e. PA-X, M2, and NS2). 																						#
# 3. organization and clean up of input and output files																										#
#		This sh script organizes the input and output files into a fixed directory structure, compresses or deletes redundant files, and prevents 				#
#		overwriting of previous analyses with the same name. 																									#
#		- __DIR_unique_sample_lists:	Contains the lists of files to loop through																					#
#		- misc:						Contains miscellaneous files that are not used in subsequent analysis but that may be needed for reference as zipped		#
#									directories)																												#
#		- DIR_log:					Contains logfiles of reading_frame_selector.py and protein_numbering_converter.py, and the WARNINGS file generated by		#
#									protein_numbering_converter.py																								#
#		- output_rfs_pnc:			Contains all other output from reading_frame_selector.py and  protein_numbering_converter.py								#
#		- DIR_input_vd_gpi:				Contains copies of the appropriate reading_frame_selector.py and protein_numbering_converter.py files for input into		#
#									variant_detector.py and gather_points_of_interest.py																		#
# 																																								#
# Prepare a config file that defines the variables in this script and provide the path under the "Configuration file for variables" header below before			#
# running this script.																																			#
#																																								#
# Variables that need to be defined in the config file:																											#
#		- DIR_scripts_python:				Path to the reading_frame_selector.py and protein_numbering_converter.py scripts											#
#		- analysis_dir:				Path to the parent directory of the directory that holds the files to be analyzed											#
#		- current_analysis:			Name of the current analysis, which could be the name of the output directory of the previous step in the analysis			#
#									(e.g. translate_sam_to_AA--job7F)																							#
# 																																								#
#################################################################################################################################################################

. ./_system/shell/global.sh

#### Load config setting - Please change config in /configs/ to your needs ####
. ./_system/shell/config_main.sh

echo
echo
echo "#####################################################"
echo "# Reading frame selector & Protein number converter #"
echo "# Version: 1.0                                      #"
echo "#####################################################"
echo
echo "Used settings:"
echo -e "\tPath to python scripts: $DIR_scripts_python"
echo -e "\tPath to input analysis data: $DIR_working"
echo
echo "#####################################################"
echo "STEP 2.1: READING FRAME SELECTION"
echo
cd ${DIR_working}


# Prevent rerun on already analysed data
if [ $(ls -l --ignore=backup | grep -c ^d) -gt 0 ]; then
  echo
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "It seems that we found already analysed data,"
  echo "therefore we assume this process has been run before."
  echo "Terminating shell script to protect any previous output."
  echo "Please backup your data, provide data for step 1 and run step 1 again."
  echo "Current analysis directory: '$DIR_working'"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo
  exit 1
fi


# create directories
# Do not show all since it is to much detail and/or are removed at the end and will never been seen by the user
echo -e "\tCreate output directories:"
echo -e "\t\t" ${DIR_output_rfs_pnc}
echo -e "\t\t" ${DIR_input_vd_gpi}
echo -e "\t\t" ${DIR_log}
echo
mkdir ${DIR_output_rfs_pnc}
mkdir ${DIR_output_rfs_pnc_AA}
mkdir ${DIR_output_rfs_pnc_NT}
mkdir ${DIR_log}
mkdir ${DIR_input_vd_gpi}
mkdir ${DIR_unique_sample_list}

# move all "all reading frame" files into the segment grouped folder
echo -e "\tBackup non-selected reading frame files to:"
echo -e "\t\t" ${FILE_Backup_UnusedFiles}
echo
zip -qjm ${FILE_Backup_UnusedFiles} ${DIR_working}/*.all*.txt

# move all AA/nt files into their own folder
echo -e "\tMove AA and nt files into their own directory..."
mv ${DIR_working}/*_AA.txt ${DIR_output_rfs_pnc_AA}/
mv ${DIR_working}/*_NA.txt ${DIR_output_rfs_pnc_NT}/

# Build a file list so we can iterate easily
echo -e "\tDetect unique samples..."
(cd  ${DIR_output_rfs_pnc_AA} && ls *.txt) | sed -e 's/_f.*//' | sort -u > ${FILE_Iterate_Sample_list_AA}
(cd  ${DIR_output_rfs_pnc_NT} && ls *.txt) | sed -e 's/_f.*//' | sort -u > ${FILE_Iterate_Sample_list_NT}

# Move AA samples into their own sample folder
echo -e "\tOrganize files into sample specific directories..."
cd ${DIR_output_rfs_pnc_AA}
while read file
do
  mkdir ${file}
  mkdir ${file}/correct_reading_frames
  mv ${DIR_output_rfs_pnc_AA}/${file}*.txt ${DIR_output_rfs_pnc_AA}/${file}/
done < ${FILE_Iterate_Sample_list_AA}
wait

# Move nt samples into their own sample folder
cd ${DIR_output_rfs_pnc_NT}
while read file
do
mkdir ${file}
mkdir ${file}/correct_reading_frames
mv ${DIR_output_rfs_pnc_NT}/${file}*.txt ${DIR_output_rfs_pnc_NT}/${file}/
done < ${FILE_Iterate_Sample_list_NT}
wait

# run the script in a loop so it executes for all sample dir in the ${DIR_working}/AA-files and ${DIR_working}/nt-files
echo -e "\tStart READING FRAME SELECTOR..."
while read file
do
python ${DIR_scripts_python}/reading_frame_selector.py ${DIR_output_rfs_pnc_AA}/${file} ${DIR_output_rfs_pnc_NT}/${file} ${DIR_output_rfs_pnc_AA}/${file}/correct_reading_frames ${DIR_output_rfs_pnc_NT}/${file}/correct_reading_frames
if [ $? -ne 0 ]; then >&2 echo "Python script failed. We quit."; exit; fi
done < ${FILE_Iterate_Sample_list_AA} > ${DIR_log}/rfs_logfile.log
wait





echo
echo
echo "#####################################################"
echo "STEP 2.2: PROTEIN NUMBERING CONVERSION"
echo
# run the protein_numbering_converter.py script to generate the 13 protein files with correct numbering and 8 gene segment files with correct numbering
echo -e "\tStart PROTEIN NUMBERING CONVERTER..."
while read file
do
mkdir ${DIR_output_rfs_pnc_AA}/${file}/$DIRNAME_Output_Step2_Protein
mkdir ${DIR_output_rfs_pnc_NT}/${file}/$DIRNAME_Output_Step2_Gene
python ${DIR_scripts_python}/protein_numbering_converter.py ${DIR_output_rfs_pnc_AA}/${file}/correct_reading_frames ${DIR_output_rfs_pnc_NT}/${file}/correct_reading_frames ${DIR_output_rfs_pnc_AA}/${file}/$DIRNAME_Output_Step2_Protein ${DIR_output_rfs_pnc_NT}/${file}/$DIRNAME_Output_Step2_Gene
if [ $? -ne 0 ]; then >&2 echo "Python script failed. We quit."; exit; fi
done < ${FILE_Iterate_Sample_list_AA} 
######################3 THIS SHOULD BE ACTIVE AND APPEND ABOVE LINE!! > ${DIR_log}/pnc_logfile.log
wait




echo
echo
echo "#####################################################"
echo "STEP 2.3: Clean up"
echo
echo -e "\tMove non-selected reading frame files into archive ZIP..."
while read file; do zip -qjm ${DIR_output_rfs_pnc_AA}/${file}/unused_rf_files.zip ${DIR_output_rfs_pnc_AA}/${file}/*.txt; done < ${FILE_Iterate_Sample_list_AA}; wait
while read file; do zip -qjm ${DIR_output_rfs_pnc_NT}/${file}/unused_rf_files.zip ${DIR_output_rfs_pnc_NT}/${file}/*.txt; done < ${FILE_Iterate_Sample_list_NT}; wait



# Build concatenated warning log file
echo -e "\tBuild concatenated warning log into log directory..."
echo -e "\t\t" ${FILE_Log_PNC_Warnings}


# Add specific sample name per warning.log file
while read file; do 
find ${DIR_output_rfs_pnc_AA}/${file}/$DIRNAME_Output_Step2_Protein/ -type f -name 'warnings.log' -exec mv {} {}_${file} \; 
done < ${FILE_Iterate_Sample_list_AA}; wait

# Concat all warning files into 1 big warning file.
while read file; do
find ${DIR_output_rfs_pnc_AA}/${file}/$DIRNAME_Output_Step2_Protein/ -name 'warnings.log_*' -type f -printf '\n==> %P <==\n' -exec cat {} \; >> ${FILE_Log_PNC_Warnings};
done < ${FILE_Iterate_Sample_list_AA}; wait




echo
echo
echo "#####################################################"
echo "STEP 2.4: Create input structure for step 3 'Variant Detector'"
echo
echo -e "\tCreate sample list to use as basis for experiment files..."

# create template sample_list for follow up analysis with variant_detector.py and gather_points_of_interest.py
cp ${FILE_Iterate_Sample_list_AA} ${DIR_input_vd_gpi}/experiment_all.txt
echo "
!! README FIRST !!
The experiment_all.txt file can be used as a basis for creating experiment list files.
Please create a file 'experiment_[your experiment name].txt' (mind the extension!) and add two or
more of the above lines from this file. Make sure to use Unix EOL when saving the file.
Edit your configuration file (setting: 'experiment_name') to make use of this new file." >> ${DIR_input_vd_gpi}/basic_experiment_list.README.txt



echo -e "\tCopy data files and strip from unused..."
mkdir ${DIR_basic_analysis_files}
cp -r ${DIR_output_rfs_pnc}/* ${DIR_basic_analysis_files}

while read file
do
rm -rf ${DIR_basic_analysis_files}/AA-files/${file}/correct_reading_frames
rm -rf ${DIR_basic_analysis_files}/AA-files/${file}/*.zip
rm -rf ${DIR_basic_analysis_files}/nt-files/${file}/correct_reading_frames
rm -rf ${DIR_basic_analysis_files}/nt-files/${file}/*.zip
done < ${FILE_Iterate_Sample_list_AA}
wait

# remove sample specific warning files
while read file; do find ${DIR_basic_analysis_files}/AA-files/${file}/$DIRNAME_Output_Step2_Protein/ -name 'warnings.log_*' -type f -exec rm {} \; ; done < ${FILE_Iterate_Sample_list_AA}; wait

echo -e "\tArchive all created data to:"
echo -e "\t\t" ${FILE_Backup_RFS_PNC_Output}
zip -qrm ${FILE_Backup_RFS_PNC_Output} ${DIR_output_rfs_pnc_AA}
zip -qrm ${FILE_Backup_RFS_PNC_Output} ${DIR_output_rfs_pnc_NT}

# clean up system created files
rm -rf ${DIR_unique_sample_list}
rm -rf ${DIR_output_rfs_pnc}


echo
echo "DONE"